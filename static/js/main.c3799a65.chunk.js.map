{"version":3,"sources":["solver/sudokuGrid.js","solver/sudokuWorker.js","components/SolvingOverlay.js","components/ErrorMessage.js","components/Sudoku.js","App.js","serviceWorker.js","index.js"],"names":["B","cols","cells","reduce","acc","a","concat","map","b","setUpWorker","SolvingOverlay","cancel","className","type","onClick","ErrorMessage","errorMessage","dismissError","Sudoku","initialGrid","Object","fromEntries","sudokuGrid","cell","useState","grid","setGrid","solving","setSolving","solution","setSolution","setErrorMessage","useWebWorkerFromScript","data","postData","useEffect","setTimeout","onChange","e","target","name","value","length","charCodeAt","newGrid","id","key","readOnly","autoComplete","rows","Array","from","x","i","rowLetter","props","slice","window","location","reload","preventDefault","App","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.c3799a65.chunk.js","sourcesContent":["function cross(A, B) {\r\n  /*\r\nA = 'abc'\r\nB = '123'\r\ncross(A, B) = [\r\n  'a1', 'a2', 'a3',\r\n  'b1', 'b2', 'b3',\r\n  'c1', 'c2', 'c3',\r\n]\r\n*/\r\n  return A.reduce((acc, a) => acc.concat(B.map((b) => a + b)), []);\r\n}\r\n\r\nconst digits = ['1', '2', '3', '4', '5', '6', '7', '8', '9'];\r\nconst rows = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I'];\r\nconst cols = [...digits];\r\nconst cells = cross(rows, cols);\r\n\r\nexport default cells;\r\n","const setUpWorker = () => {\r\n  /*\r\n  sudokuString is the output of transpiling sudoku-solver.js through babel\r\n  using npm run transpile-solver\r\n  */\r\n  const sudokuString =    '\"use strict\";function ownKeys(a,b){var c=Object.keys(a);if(Object.getOwnPropertySymbols){var d=Object.getOwnPropertySymbols(a);b&&(d=d.filter(function(b){return Object.getOwnPropertyDescriptor(a,b).enumerable})),c.push.apply(c,d)}return c}function _objectSpread(a){for(var b,c=1;c<arguments.length;c++)b=null==arguments[c]?{}:arguments[c],c%2?ownKeys(b,!0).forEach(function(c){_defineProperty(a,c,b[c])}):Object.getOwnPropertyDescriptors?Object.defineProperties(a,Object.getOwnPropertyDescriptors(b)):ownKeys(b).forEach(function(c){Object.defineProperty(a,c,Object.getOwnPropertyDescriptor(b,c))});return a}function _defineProperty(a,b,c){return b in a?Object.defineProperty(a,b,{value:c,enumerable:!0,configurable:!0,writable:!0}):a[b]=c,a}function _toConsumableArray(a){return _arrayWithoutHoles(a)||_iterableToArray(a)||_nonIterableSpread()}function _nonIterableSpread(){throw new TypeError(\"Invalid attempt to spread non-iterable instance\")}function _iterableToArray(a){if(Symbol.iterator in Object(a)||\"[object Arguments]\"===Object.prototype.toString.call(a))return Array.from(a)}function _arrayWithoutHoles(a){if(Array.isArray(a)){for(var b=0,c=Array(a.length);b<a.length;b++)c[b]=a[b];return c}}function sudoku(a){function b(a,b){return a.reduce(function(c,d){return c.concat(b.map(function(a){return d+a}))},[])}function c(a,b,c){var e=a[b].filter(function(a){return a!==c});return!!e.every(function(c){return d(a,b,c)})&&a}function d(a,b,e){if(!a[b].includes(e))return a;if(a[b]=a[b].filter(function(a){return a!==e}),0===a[b].length)return!1;if(1===a[b].length){var f=a[b][0];if(!r[b].every(function(b){return d(a,b,f)}))return!1}return!!q[b].every(function(b){var d=b.filter(function(b){return a[b].includes(e)});return 0!==d.length&&!!(1!==d.length||c(a,d[0],e))})&&a}function e(a){var b=Object.fromEntries(j.map(function(a){return[a,g]}));return!!Object.keys(a).every(function(d){return\"\"===a[d]||c(b,d,a[d])})&&b}function f(d){if(!d)return!1;if(j.every(function(a){return 1===d[a].length}))return d;var e=j.filter(function(a){return 1<d[a].length}).sort(function(c,a){return d[c].length-d[a].length})[0];return d[e].map(function(a){return f(c(_objectSpread({},d),e,a))}).find(function(a){return!!a})||!1}var g=[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"],h=[\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\"],i=[].concat(g),j=b(h,i),k=i.map(function(a){return b(h,[a])}),l=h.map(function(a){return b([a],i)}),m=[h.slice(0,3),h.slice(3,6),h.slice(6)],n=[i.slice(0,3),i.slice(3,6),i.slice(6)],o=m.reduce(function(a,c){return a.concat(n.map(function(a){return b(c,a)}))},[]),p=[].concat(_toConsumableArray(k),_toConsumableArray(l),_toConsumableArray(o)),q=Object.fromEntries(j.map(function(a){return[a,p.filter(function(b){return b.includes(a)})]})),r=Object.fromEntries(j.map(function(a){var b=new Set(q[a].flat());return b.delete(a),[a,_toConsumableArray(b)]}));return function(a){return f(e(a))}(a)}';\r\n\r\n  const onmessage = `var onmessage = (e) => {\r\n      postMessage(sudoku(e.data));\r\n    };`;\r\n\r\n  return `${sudokuString};\r\n  ${onmessage}`;\r\n};\r\n\r\nexport default setUpWorker;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst SolvingOverlay = ({ cancel }) => (\r\n  <div className=\"overlay\">\r\n    <div className=\"lds-grid\">\r\n      <div />\r\n      <div />\r\n      <div />\r\n      <div />\r\n      <div />\r\n      <div />\r\n      <div />\r\n      <div />\r\n      <div />\r\n    </div>\r\n\r\n    <button type=\"button\" className=\"btn-cancel\" onClick={cancel}>\r\n        Cancel\r\n    </button>\r\n  </div>\r\n);\r\n\r\nSolvingOverlay.propTypes = {\r\n  cancel: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default SolvingOverlay;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst ErrorMessage = ({ errorMessage, dismissError }) => (\r\n  <div className=\"error-message\">\r\n    {errorMessage}\r\n    <button type=\"button\" className=\"btn-close\" onClick={dismissError}>\r\n      <div className=\"cross\">\r\n        <div />\r\n        <div />\r\n      </div>\r\n    </button>\r\n  </div>\r\n);\r\n\r\nErrorMessage.propTypes = {\r\n  errorMessage: PropTypes.string.isRequired,\r\n  dismissError: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ErrorMessage;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useWebWorkerFromScript } from 'react-webworker-hook';\r\nimport sudokuGrid from '../solver/sudokuGrid';\r\nimport setUpWorker from '../solver/sudokuWorker';\r\n\r\nimport SolvingOverlay from './SolvingOverlay';\r\nimport ErrorMessage from './ErrorMessage';\r\n\r\nconst Sudoku = () => {\r\n  const initialGrid = Object.fromEntries(sudokuGrid.map((cell) => [cell, '']));\r\n\r\n  const [grid, setGrid] = useState(initialGrid);\r\n  const [solving, setSolving] = useState(false);\r\n  const [solution, setSolution] = useState(null);\r\n  const [errorMessage, setErrorMessage] = useState('');\r\n\r\n  // set up Web Worker\r\n  const [data, postData] = useWebWorkerFromScript(setUpWorker());\r\n\r\n  // call setSolution when worker responds with a solution\r\n  useEffect(() => {\r\n    setSolution(data);\r\n    setSolving(false);\r\n  }, [data]);\r\n\r\n  const dismissError = () => {\r\n    setErrorMessage('');\r\n  };\r\n\r\n  // if solution === false, no solution exists\r\n  useEffect(() => {\r\n    const showError = (message) => {\r\n      setErrorMessage(message);\r\n      setTimeout(dismissError, 5000);\r\n    };\r\n\r\n    if (solution === false) showError('No possible solution');\r\n  }, [solution]);\r\n\r\n  // handle user grid input\r\n  const onChange = (e) => {\r\n    const { name, value } = e.target;\r\n\r\n    // Only allow single characters\r\n    if (value.length > 1) return;\r\n    // only allow digits from 1 through 9\r\n    if (value.charCodeAt(0) < 49 || value.charCodeAt(0) > 57) return;\r\n\r\n    const newGrid = { ...grid };\r\n\r\n    newGrid[name] = value;\r\n    setGrid(newGrid);\r\n  };\r\n\r\n  // solve grid\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    setSolving(true);\r\n    postData(grid);\r\n  };\r\n\r\n  // reset grid\r\n  const onReset = (e) => {\r\n    e.preventDefault();\r\n    setGrid(initialGrid);\r\n    setSolution(null);\r\n  };\r\n\r\n  // allow user to cancel process if solution is taking a long time\r\n  const cancel = () => {\r\n    window.location.reload();\r\n  };\r\n\r\n  // use sudokuGrid to generate all 81 cells\r\n  const cells = sudokuGrid.map((cell) => (\r\n    <td id={cell} key={`cell${cell}`}>\r\n      {solution ? (\r\n        <input\r\n          readOnly\r\n          value={solution[cell]}\r\n          className={grid[cell] ? 'bold' : null}\r\n        />\r\n      ) : (\r\n        <input\r\n          type=\"number\"\r\n          name={cell}\r\n          value={grid[cell]}\r\n          onChange={onChange}\r\n          autoComplete=\"off\"\r\n        />\r\n      )}\r\n    </td>\r\n  ));\r\n\r\n  // seperate each of the 9 rows and wrap in <tr>\r\n  const rows = Array.from(new Array(9), (x, i) => {\r\n    const rowLetter = cells[i * 9].props.id.slice(0, 1);\r\n    return (\r\n      <tr id={rowLetter} key={`row-${rowLetter}`}>\r\n        {cells.slice(i * 9, (i + 1) * 9)}\r\n      </tr>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <>\r\n      {solving ? <SolvingOverlay cancel={cancel} /> : null}\r\n\r\n      <form>\r\n        <table>\r\n          <tbody>{rows}</tbody>\r\n        </table>\r\n\r\n        {solution ? (\r\n          <button type=\"button\" className=\"btn-reset\" onClick={onReset}>\r\n            Reset\r\n          </button>\r\n        ) : (\r\n          <button type=\"submit\" className=\"btn-submit\" onClick={onSubmit}>\r\n            Solve\r\n          </button>\r\n        )}\r\n\r\n        {errorMessage ? (\r\n          <ErrorMessage\r\n            errorMessage={errorMessage}\r\n            dismissError={dismissError}\r\n          />\r\n        ) : null}\r\n      </form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Sudoku;\r\n","import React from 'react';\nimport './css/main.css';\nimport Sudoku from './components/Sudoku';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Sudoku />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}