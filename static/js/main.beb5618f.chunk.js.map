{"version":3,"sources":["solver/sudokuGrid.js","solver/sudoku-solver.js","solver/sudokuWorker.js","components/SolvingOverlay.js","components/ErrorMessage.js","components/Sudoku.js","App.js","serviceWorker.js","index.js"],"names":["B","cols","cells","reduce","acc","a","concat","map","b","sudoku","cross","A","digits","rows","colsList","col","rowsList","row","colSections","slice","rowSections","squaresList","rowSlice","colSlice","unitList","units","Object","fromEntries","cell","filter","unit","includes","set","Set","flat","delete","setUpWorker","sudokuString","toString","workerString","substring","indexOf","lastIndexOf","SolvingOverlay","cancel","className","type","onClick","ErrorMessage","errorMessage","dismissError","Sudoku","initialGrid","sudokuGrid","useState","grid","setGrid","solving","setSolving","solution","setSolution","setErrorMessage","useWebWorkerFromScript","data","postData","useEffect","setTimeout","onChange","e","target","name","value","length","charCodeAt","newGrid","id","key","readOnly","autoComplete","Array","from","x","i","rowLetter","props","window","location","reload","preventDefault","App","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.beb5618f.chunk.js","sourcesContent":["function cross(A, B) {\r\n  /*\r\nA = 'abc'\r\nB = '123'\r\ncross(A, B) = [\r\n  'a1', 'a2', 'a3',\r\n  'b1', 'b2', 'b3',\r\n  'c1', 'c2', 'c3',\r\n]\r\n*/\r\n  return A.reduce((acc, a) => acc.concat(B.map((b) => a + b)), []);\r\n}\r\n\r\nconst digits = ['1', '2', '3', '4', '5', '6', '7', '8', '9'];\r\nconst rows = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I'];\r\nconst cols = [...digits];\r\nconst cells = cross(rows, cols);\r\n\r\nexport default cells;\r\n","function sudoku() {\r\n  function cross(A, B) {\r\n    /*\r\nA = 'abc'\r\nB = '123'\r\ncross(A, B) = [\r\n  'a1', 'a2', 'a3',\r\n  'b1', 'b2', 'b3',\r\n  'c1', 'c2', 'c3',\r\n]\r\n*/\r\n    return A.reduce((acc, a) => acc.concat(B.map((b) => a + b)), []);\r\n  }\r\n\r\n  const digits = ['1', '2', '3', '4', '5', '6', '7', '8', '9'];\r\n  const rows = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I'];\r\n  const cols = [...digits];\r\n  const cells = cross(rows, cols);\r\n\r\n  const colsList = cols.map((col) => cross(rows, [col]));\r\n  const rowsList = rows.map((row) => cross([row], cols));\r\n\r\n  const colSections = [rows.slice(0, 3), rows.slice(3, 6), rows.slice(6)];\r\n  const rowSections = [cols.slice(0, 3), cols.slice(3, 6), cols.slice(6)];\r\n\r\n  // Create a list of all 9 square sections\r\n  const squaresList = colSections.reduce(\r\n    (acc, rowSlice) => acc.concat(rowSections.map((colSlice) => cross(rowSlice, colSlice))),\r\n    [],\r\n  );\r\n\r\n  // A unit refers to a list of cells whose values must contain all 9 digits\r\n  const unitList = [...colsList, ...rowsList, ...squaresList];\r\n\r\n  // Create an oject of form { cell: [ ...units_containing_cell ] }\r\n  const units = Object.fromEntries(\r\n    cells.map((cell) => [cell, unitList.filter((unit) => unit.includes(cell))]),\r\n  );\r\n\r\n  // Create an object of form { cell: [ ...cells_whose_value_depends_on_cell ] }\r\n  const peers = Object.fromEntries(\r\n    cells.map((cell) => {\r\n      const set = new Set(units[cell].flat());\r\n      set.delete(cell);\r\n      return [cell, [...set]];\r\n    }),\r\n  );\r\n\r\n  function assign(values, cell, digit) {\r\n    /*\r\n    Eliminate all the other values (except digit) from values[cell] and propagate.\r\n    Return values, except return False if a contradiction is detected.\r\n  */\r\n\r\n    const otherValues = values[cell].filter((value) => value !== digit);\r\n\r\n    if (otherValues.every((value) => eliminate(values, cell, value))) {\r\n      return values;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  function eliminate(values, cell, digit) {\r\n    /*\r\n    Eliminate digit from values[cell]; propagate when values or places <= 2.\r\n    Return values, except return False if a contradiction is detected.\r\n  */\r\n\r\n    // Check if already eliminated\r\n    if (!values[cell].includes(digit)) return values;\r\n\r\n    values[cell] = values[cell].filter((value) => value !== digit);\r\n\r\n    // (1) If a square is reduced to one value then eliminate value from the peers.\r\n\r\n    // If no values left we have reached a contradiction.\r\n    if (values[cell].length === 0) {\r\n      return false;\r\n    }\r\n\r\n    if (values[cell].length === 1) {\r\n      const value = values[cell][0];\r\n\r\n      if (!peers[cell].every((peer) => eliminate(values, peer, value))) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    // (2) If a unit is reduced to only one place for a value, then put it there.\r\n\r\n    if (\r\n      !units[cell].every((unit) => {\r\n        const digitPlaces = unit.filter((unitCell) => values[unitCell].includes(digit));\r\n\r\n        if (digitPlaces.length === 0) {\r\n          // Contradiction: no place for this value.\r\n          return false;\r\n        }\r\n        if (digitPlaces.length === 1) {\r\n          // digit can only be in one place in unit, assign it there.\r\n          if (!assign(values, digitPlaces[0], digit)) {\r\n            return false;\r\n          }\r\n        }\r\n\r\n        return true;\r\n      })\r\n    ) {\r\n      return false;\r\n    }\r\n\r\n    return values;\r\n  }\r\n\r\n  function parseGrid(grid) {\r\n    /*\r\n  Convert grid to an Object of possible values, { cell, digits },\r\n  or return false if a contradiction is detected.\r\n  */\r\n\r\n    // To start, every square can be any digit; then assign values from grid\r\n    const values = Object.fromEntries(cells.map((cell) => [cell, digits]));\r\n\r\n    if (\r\n      !Object.keys(grid).every((cell) => {\r\n        if (grid[cell] === '') return true;\r\n\r\n        return assign(values, cell, grid[cell]);\r\n      })\r\n    ) {\r\n      return false;\r\n    }\r\n\r\n    return values;\r\n  }\r\n\r\n  function gridValues(grid) {\r\n    /*\r\n  Convert grid into an Object of { cell: value } with '' for empties.\r\n  */\r\n\r\n    // check to see if grid is valid\r\n    const re = /^[0-9.]{81}$/;\r\n    if (!re.test(grid)) return false;\r\n\r\n    return Object.fromEntries(\r\n      cells.map((cell, i) => [\r\n        cell,\r\n        grid[i] === '0' || grid[i] === '.' ? '' : grid[i],\r\n      ]),\r\n    );\r\n  }\r\n\r\n  function search(values) {\r\n    // Using depth-first search and propagation, try all possible values.\r\n\r\n    // Check if failed earlier.\r\n    if (!values) return false;\r\n\r\n    // Check if solved.\r\n    if (cells.every((cell) => values[cell].length === 1)) return values;\r\n\r\n    // Choose the unfilled square with the fewest possibilities\r\n    const smallestCell = cells\r\n      .filter((cell) => values[cell].length > 1)\r\n      .sort((a, b) => values[a].length - values[b].length)[0];\r\n\r\n    return (\r\n      values[smallestCell]\r\n        .map((value) =>\r\n          // eslint-disable-next-line prefer-object-spread\r\n          search(assign(Object.assign({}, values), smallestCell, value)))\r\n        .find((e) => !!e) || false\r\n    );\r\n  }\r\n\r\n  function solve(grid) {\r\n    return search(parseGrid(grid));\r\n  }\r\n}\r\n\r\nexport default sudoku;\r\n","import sudoku from './sudoku-solver';\r\n\r\nconst setUpWorker = () => {\r\n  const sudokuString = sudoku.toString();\r\n  const workerString = sudokuString.substring(\r\n    sudokuString.indexOf('{') + 1,\r\n    sudokuString.lastIndexOf('}'),\r\n  );\r\n\r\n  const onmessage = `var onmessage = (e) => {\r\n      postMessage(solve(e.data));\r\n    };`;\r\n\r\n  return `${workerString};\r\n  ${onmessage}`;\r\n};\r\n\r\nexport default setUpWorker;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst SolvingOverlay = ({ cancel }) => (\r\n  <div className=\"overlay\">\r\n    <div className=\"lds-grid\">\r\n      <div />\r\n      <div />\r\n      <div />\r\n      <div />\r\n      <div />\r\n      <div />\r\n      <div />\r\n      <div />\r\n      <div />\r\n    </div>\r\n\r\n    <button type=\"button\" className=\"btn-cancel\" onClick={cancel}>\r\n        Cancel\r\n    </button>\r\n  </div>\r\n);\r\n\r\nSolvingOverlay.propTypes = {\r\n  cancel: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default SolvingOverlay;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst ErrorMessage = ({ errorMessage, dismissError }) => (\r\n  <div className=\"error-message\">\r\n    {errorMessage}\r\n    <button type=\"button\" className=\"btn-close\" onClick={dismissError}>\r\n      <div className=\"cross\">\r\n        <div />\r\n        <div />\r\n      </div>\r\n    </button>\r\n  </div>\r\n);\r\n\r\nErrorMessage.propTypes = {\r\n  errorMessage: PropTypes.string.isRequired,\r\n  dismissError: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ErrorMessage;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useWebWorkerFromScript } from 'react-webworker-hook';\r\nimport sudokuGrid from '../solver/sudokuGrid';\r\nimport setUpWorker from '../solver/sudokuWorker';\r\n\r\nimport SolvingOverlay from './SolvingOverlay';\r\nimport ErrorMessage from './ErrorMessage';\r\n\r\nconst Sudoku = () => {\r\n  const initialGrid = Object.fromEntries(sudokuGrid.map((cell) => [cell, '']));\r\n\r\n  const [grid, setGrid] = useState(initialGrid);\r\n  const [solving, setSolving] = useState(false);\r\n  const [solution, setSolution] = useState(null);\r\n  const [errorMessage, setErrorMessage] = useState('');\r\n\r\n  // set up Web Worker\r\n  const [data, postData] = useWebWorkerFromScript(setUpWorker());\r\n\r\n  // call setSolution when worker responds with a solution\r\n  useEffect(() => {\r\n    setSolution(data);\r\n    setSolving(false);\r\n  }, [data]);\r\n\r\n  const dismissError = () => {\r\n    setErrorMessage('');\r\n  };\r\n\r\n  // if solution === false, no solution exists\r\n  useEffect(() => {\r\n    const showError = (message) => {\r\n      setErrorMessage(message);\r\n      setTimeout(dismissError, 5000);\r\n    };\r\n\r\n    if (solution === false) showError('No possible solution');\r\n  }, [solution]);\r\n\r\n  // handle user grid input\r\n  const onChange = (e) => {\r\n    const { name, value } = e.target;\r\n\r\n    // Only allow single characters\r\n    if (value.length > 1) return;\r\n    // only allow digits from 1 through 9\r\n    if (value.charCodeAt(0) < 49 || value.charCodeAt(0) > 57) return;\r\n\r\n    const newGrid = { ...grid };\r\n\r\n    newGrid[name] = value;\r\n    setGrid(newGrid);\r\n  };\r\n\r\n  // solve grid\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    setSolving(true);\r\n    postData(grid);\r\n  };\r\n\r\n  // reset grid\r\n  const onReset = (e) => {\r\n    e.preventDefault();\r\n    setGrid(initialGrid);\r\n    setSolution(null);\r\n  };\r\n\r\n  // allow user to cancel process if solution is taking a long time\r\n  const cancel = () => {\r\n    window.location.reload();\r\n  };\r\n\r\n  // use sudokuGrid to generate all 81 cells\r\n  const cells = sudokuGrid.map((cell) => (\r\n    <td id={cell} key={`cell${cell}`}>\r\n      {solution ? (\r\n        <input\r\n          readOnly\r\n          value={solution[cell]}\r\n          className={grid[cell] ? 'bold' : null}\r\n        />\r\n      ) : (\r\n        <input\r\n          type=\"number\"\r\n          name={cell}\r\n          value={grid[cell]}\r\n          onChange={onChange}\r\n          autoComplete=\"off\"\r\n        />\r\n      )}\r\n    </td>\r\n  ));\r\n\r\n  // seperate each of the 9 rows and wrap in <tr>\r\n  const rows = Array.from(new Array(9), (x, i) => {\r\n    const rowLetter = cells[i * 9].props.id.slice(0, 1);\r\n    return (\r\n      <tr id={rowLetter} key={`row-${rowLetter}`}>\r\n        {cells.slice(i * 9, (i + 1) * 9)}\r\n      </tr>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <>\r\n      {solving ? <SolvingOverlay cancel={cancel} /> : null}\r\n\r\n      <form>\r\n        <table>\r\n          <tbody>{rows}</tbody>\r\n        </table>\r\n\r\n        {solution ? (\r\n          <button type=\"button\" className=\"btn-reset\" onClick={onReset}>\r\n            Reset\r\n          </button>\r\n        ) : (\r\n          <button type=\"submit\" className=\"btn-submit\" onClick={onSubmit}>\r\n            Solve\r\n          </button>\r\n        )}\r\n\r\n        {errorMessage ? (\r\n          <ErrorMessage\r\n            errorMessage={errorMessage}\r\n            dismissError={dismissError}\r\n          />\r\n        ) : null}\r\n      </form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Sudoku;\r\n","import React from 'react';\nimport './css/main.css';\nimport Sudoku from './components/Sudoku';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Sudoku />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}