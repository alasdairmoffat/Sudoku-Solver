{"version":3,"sources":["solver/sudoku-solver.js","components/Sudoku.js","App.js","serviceWorker.js","index.js"],"names":["cross","A","B","reduce","acc","a","concat","map","b","digits","rows","cols","cells","colsList","col","rowsList","row","colSections","slice","rowSections","squaresList","rowSlice","colSlice","unitList","units","Object","fromEntries","cell","filter","unit","includes","peers","set","Set","flat","delete","assign","values","digit","value","every","eliminate","length","peer","digitPlaces","unitCell","search","smallestCell","sort","find","e","solve","grid","keys","parseGrid","Sudoku","initialGrid","sudoku","useState","setGrid","solution","setSolution","errorMessage","setErrorMessage","dismissError","onChange","target","name","charCodeAt","newGrid","id","key","readOnly","className","type","autoComplete","Array","from","x","i","rowLetter","props","onClick","preventDefault","solvedGrid","setTimeout","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.eb12edda.chunk.js","sourcesContent":["function cross(A, B) {\r\n  /*\r\nA = 'abc'\r\nB = '123'\r\ncross(A, B) = [\r\n  'a1', 'a2', 'a3',\r\n  'b1', 'b2', 'b3',\r\n  'c1', 'c2', 'c3',\r\n]\r\n*/\r\n  return A.reduce((acc, a) => acc.concat(B.map((b) => a + b)), []);\r\n}\r\n\r\nconst digits = ['1', '2', '3', '4', '5', '6', '7', '8', '9'];\r\nconst rows = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I'];\r\nconst cols = [...digits];\r\nconst cells = cross(rows, cols);\r\n\r\nconst colsList = cols.map((col) => cross(rows, [col]));\r\nconst rowsList = rows.map((row) => cross([row], cols));\r\n\r\nconst colSections = [rows.slice(0, 3), rows.slice(3, 6), rows.slice(6)];\r\nconst rowSections = [cols.slice(0, 3), cols.slice(3, 6), cols.slice(6)];\r\n\r\n// Create a list of all 9 square sections\r\nconst squaresList = colSections.reduce(\r\n  (acc, rowSlice) => acc.concat(rowSections.map((colSlice) => cross(rowSlice, colSlice))),\r\n  [],\r\n);\r\n\r\n// A unit refers to a list of cells whose values must contain all 9 digits\r\nconst unitList = [...colsList, ...rowsList, ...squaresList];\r\n\r\n// Create an oject of form { cell: [ ...units_containing_cell ] }\r\nconst units = Object.fromEntries(\r\n  cells.map((cell) => [cell, unitList.filter((unit) => unit.includes(cell))]),\r\n);\r\n\r\n// Create an object of form { cell: [ ...cells_whose_value_depends_on_cell ] }\r\nconst peers = Object.fromEntries(\r\n  cells.map((cell) => {\r\n    const set = new Set(units[cell].flat());\r\n    set.delete(cell);\r\n    return [cell, [...set]];\r\n  }),\r\n);\r\n\r\nfunction assign(values, cell, digit) {\r\n  /*\r\n    Eliminate all the other values (except digit) from values[cell] and propagate.\r\n    Return values, except return False if a contradiction is detected.\r\n  */\r\n\r\n  const otherValues = values[cell].filter((value) => value !== digit);\r\n\r\n  if (otherValues.every((value) => eliminate(values, cell, value))) {\r\n    return values;\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nfunction eliminate(values, cell, digit) {\r\n  /*\r\n    Eliminate digit from values[cell]; propagate when values or places <= 2.\r\n    Return values, except return False if a contradiction is detected.\r\n  */\r\n\r\n  // Check if already eliminated\r\n  if (!values[cell].includes(digit)) return values;\r\n\r\n  values[cell] = values[cell].filter((value) => value !== digit);\r\n\r\n  // (1) If a square is reduced to one value then eliminate value from the peers.\r\n\r\n  // If no values left we have reached a contradiction.\r\n  if (values[cell].length === 0) {\r\n    return false;\r\n  }\r\n\r\n  if (values[cell].length === 1) {\r\n    const value = values[cell][0];\r\n\r\n    if (!peers[cell].every((peer) => eliminate(values, peer, value))) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // (2) If a unit is reduced to only one place for a value, then put it there.\r\n\r\n  if (\r\n    !units[cell].every((unit) => {\r\n      const digitPlaces = unit.filter((unitCell) => values[unitCell].includes(digit));\r\n\r\n      if (digitPlaces.length === 0) {\r\n        // Contradiction: no place for this value.\r\n        return false;\r\n      }\r\n      if (digitPlaces.length === 1) {\r\n        // digit can only be in one place in unit, assign it there.\r\n        if (!assign(values, digitPlaces[0], digit)) {\r\n          return false;\r\n        }\r\n      }\r\n\r\n      return true;\r\n    })\r\n  ) {\r\n    return false;\r\n  }\r\n\r\n  return values;\r\n}\r\n\r\nfunction parseGrid(grid) {\r\n  /*\r\n  Convert grid to an Object of possible values, { cell, digits },\r\n  or return false if a contradiction is detected.\r\n  */\r\n\r\n  // To start, every square can be any digit; then assign values from grid\r\n  const values = Object.fromEntries(cells.map((cell) => [cell, digits]));\r\n\r\n  if (\r\n    !Object.keys(grid).every((cell) => {\r\n      if (grid[cell] === '') return true;\r\n\r\n      return assign(values, cell, grid[cell]);\r\n    })\r\n  ) {\r\n    return false;\r\n  }\r\n\r\n  return values;\r\n}\r\n\r\nfunction gridValues(grid) {\r\n  /*\r\n  Convert grid into an Object of { cell: value } with '' for empties.\r\n  */\r\n\r\n  // check to see if grid is valid\r\n  const re = /^[0-9.]{81}$/;\r\n  if (!re.test(grid)) return false;\r\n\r\n  return Object.fromEntries(\r\n    cells.map((cell, i) => [\r\n      cell,\r\n      grid[i] === '0' || grid[i] === '.' ? '' : grid[i],\r\n    ]),\r\n  );\r\n}\r\n\r\nfunction search(values) {\r\n  // Using depth-first search and propagation, try all possible values.\r\n\r\n  // Check if failed earlier.\r\n  if (!values) return false;\r\n\r\n  // Check if solved.\r\n  if (cells.every((cell) => values[cell].length === 1)) return values;\r\n\r\n  // Choose the unfilled square with the fewest possibilities\r\n  const smallestCell = cells\r\n    .filter((cell) => values[cell].length > 1)\r\n    .sort((a, b) => values[a].length - values[b].length)[0];\r\n\r\n  return (\r\n    values[smallestCell]\r\n      .map((value) => search(assign({ ...values }, smallestCell, value)))\r\n      .find((e) => !!e) || false\r\n  );\r\n}\r\n\r\nfunction solve(grid) {\r\n  return search(parseGrid(grid));\r\n}\r\n\r\nexport default { cells, solve };\r\n","import React, { useState } from 'react';\r\nimport sudoku from '../solver/sudoku-solver';\r\n\r\nconst Sudoku = () => {\r\n  const initialGrid = Object.fromEntries(sudoku.cells.map((cell) => [cell, '']));\r\n\r\n  const [grid, setGrid] = useState(initialGrid);\r\n  const [solution, setSolution] = useState(null);\r\n  const [errorMessage, setErrorMessage] = useState('');\r\n\r\n  const dismissError = () => {\r\n    setErrorMessage('');\r\n  };\r\n\r\n  const showError = (message) => {\r\n    setErrorMessage(message);\r\n    setTimeout(dismissError, 5000);\r\n  };\r\n\r\n  const onChange = (e) => {\r\n    const { name, value } = e.target;\r\n\r\n    // Only allow single characters\r\n    if (value.length > 1) return;\r\n    // only allow digits from 1 through 9\r\n    if (value.charCodeAt(0) < 49 || value.charCodeAt(0) > 57) return;\r\n\r\n    const newGrid = { ...grid };\r\n\r\n    newGrid[name] = value;\r\n    setGrid(newGrid);\r\n  };\r\n\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n    const solvedGrid = sudoku.solve(grid);\r\n    if (solvedGrid) {\r\n      setSolution(solvedGrid);\r\n    } else {\r\n      showError('No possible solution');\r\n    }\r\n  };\r\n\r\n  const onReset = (e) => {\r\n    e.preventDefault();\r\n    setGrid(initialGrid);\r\n    setSolution(null);\r\n  };\r\n\r\n  const cells = sudoku.cells.map((cell) => (\r\n    <td id={cell} key={`cell${cell}`}>\r\n      {solution ? (\r\n        <input\r\n          readOnly\r\n          value={solution[cell]}\r\n          className={grid[cell] ? 'bold' : null}\r\n        />\r\n      ) : (\r\n        <input\r\n          type=\"number\"\r\n          name={cell}\r\n          value={grid[cell]}\r\n          onChange={onChange}\r\n          autoComplete=\"off\"\r\n        />\r\n      )}\r\n    </td>\r\n  ));\r\n\r\n  const rows = Array.from(new Array(9), (x, i) => {\r\n    const rowLetter = cells[i * 9].props.id.slice(0, 1);\r\n    return (\r\n      <tr id={rowLetter} key={`row-${rowLetter}`}>\r\n        {cells.slice(i * 9, (i + 1) * 9)}\r\n      </tr>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <form>\r\n      <table>\r\n        <tbody>{rows}</tbody>\r\n      </table>\r\n\r\n      {solution ? (\r\n        <button type=\"button\" className=\"btn-reset\" onClick={onReset}>\r\n          Reset\r\n        </button>\r\n      ) : (\r\n        <button type=\"submit\" className=\"btn-submit\" onClick={onSubmit}>\r\n          Solve\r\n        </button>\r\n      )}\r\n\r\n      {errorMessage ? (\r\n        <div className=\"error-message\">\r\n          {errorMessage}\r\n          <button type=\"button\" onClick={dismissError}>\r\n            <div className=\"cross\">\r\n              <div />\r\n              <div />\r\n            </div>\r\n          </button>\r\n        </div>\r\n      ) : null}\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Sudoku;\r\n","import React from 'react';\nimport './css/main.css';\nimport Sudoku from './components/Sudoku';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Sudoku />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}