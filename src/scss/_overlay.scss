$circle-radius: 30px;
$circle-gap: 30px;

$grid-width: calc(#{$circle-gap} * 4 + #{$circle-radius} * 6);

@function mod3($i) {
  $mod: $i % 3;
  @return if($mod == 0, 3, $mod);
}

// map 1,2,3 => 1, 4,5,6 => 2, 7,8,9 => 3
@function calc-row($index) {
  @return (3 + $index - mod3($index)) / 3;
}

// map 1,4,7 => 1, 2,5,8 => 2, 3,6,9 => 3
@function calc-col($index) {
  @return mod3($index);
}

@function child-top($index) {
  $gaps: calc-row($index);
  $radii: ($gaps - 1) * 2;

  @return $gaps * $circle-gap + $radii * $circle-radius;
}

@function child-left($index) {
  $gaps: calc-col($index);
  $radii: ($gaps - 1) * 2;

  @return $gaps * $circle-gap + $radii * $circle-radius;
}

@function child-delay($index) {
  @return -0.4 * (calc-row($index) + calc-col($index) - 2);
}

// Styling
.overlay {
  position: absolute;
  background-color: rgba(255, 255, 255, 0.8);
  height: 90vh;
  width: 100vw;

  // loader css
  .lds-grid {
    position: relative;
    width: $grid-width;
    height: $grid-width;
    left: calc(50% - #{$grid-width} / 2);

    div {
      position: absolute;
      width: calc(#{$circle-radius} * 2);
      height: calc(#{$circle-radius} * 2);
      border-radius: 50%;
      background: #000;
      animation: lds-grid 1.2s linear infinite;

      @for $i from 1 through 9 {
        &:nth-child(#{$i}) {
          top: child-top($i);
          left: child-left($i);
          animation-delay: #{child-delay($i)}s;
        }
      }
    }
  }

  @keyframes lds-grid {
    0%,
    100% {
      opacity: 1;
    }
    50% {
      opacity: 0.5;
    }
  }
}
